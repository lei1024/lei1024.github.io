import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as r,a as e,b as n,d as a,f as d}from"./app-8hD5aTBQ.js";const l={},o=e("h1",{id:"免费申请ssl证书",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#免费申请ssl证书","aria-hidden":"true"},"#"),n(" 免费申请SSL证书")],-1),p=e("h3",{id:"certbot-简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#certbot-简介","aria-hidden":"true"},"#"),n(" Certbot 简介")],-1),u={href:"https://github.com/certbot/certbot",target:"_blank",rel:"noopener noreferrer"},v={href:"https://letsencrypt.org/getting-started/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment",target:"_blank",rel:"noopener noreferrer"},m=d(`<h3 id="_1-准备" tabindex="-1"><a class="header-anchor" href="#_1-准备" aria-hidden="true">#</a> 1.准备</h3><ul><li>拥有一个可以访问的域名</li><li>拥有一台云服务器</li></ul><h3 id="_2-使用docker安装" tabindex="-1"><a class="header-anchor" href="#_2-使用docker安装" aria-hidden="true">#</a> 2.使用Docker安装</h3><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker run -it --rm --name certbot -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; -p 80:80 certbot/certbot certonly
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-运行命令后按照提示操作" tabindex="-1"><a class="header-anchor" href="#_3-运行命令后按照提示操作" aria-hidden="true">#</a> 3.运行命令后按照提示操作</h3><h3 id="_4-生成文件" tabindex="-1"><a class="header-anchor" href="#_4-生成文件" aria-hidden="true">#</a> 4.生成文件</h3><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Successfully received certificate.

Certificate is saved at: **

Key is saved at: **

This certificate expires on 2024-03-21.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最后-邮箱验证" tabindex="-1"><a class="header-anchor" href="#最后-邮箱验证" aria-hidden="true">#</a> 最后，邮箱验证</h3><h3 id="_5-基于docker环境下给nginx进行配置" tabindex="-1"><a class="header-anchor" href="#_5-基于docker环境下给nginx进行配置" aria-hidden="true">#</a> 5.基于Docker环境下给Nginx进行配置</h3><ul><li><p>docker安装Nginx</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker run --restart always --name Nginx -d -p 80:80 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>访问界面测试</p></li><li><p>挂载后重启</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker run --restart always --name Nginx -d -p 80:80 -v /home/nginx/html:/usr/share/nginx/html -v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加SSL证书</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>  
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">listen</span>  [::]:80</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">server_name</span>  www.flashdiko.top</span><span class="token punctuation">;</span>  
  
    <span class="token directive"><span class="token keyword">rewrite</span> ^(.*) https://<span class="token variable">$server_name</span><span class="token variable">$1</span> permanent</span><span class="token punctuation">;</span>  
  
<span class="token punctuation">}</span>  
  
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>  
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">server_name</span>  www.flashdiko.top</span><span class="token punctuation">;</span>  
  
    <span class="token directive"><span class="token keyword">ssl_certificate</span>      /home/nginx/ssl/fullchain.pem</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  /home/nginx/ssl/privkey.pem</span><span class="token punctuation">;</span>  
  
    <span class="token directive"><span class="token keyword">ssl_session_cache</span>    shared:SSL:1m</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">ssl_session_timeout</span>  <span class="token number">5m</span></span><span class="token punctuation">;</span>  
  
    <span class="token directive"><span class="token keyword">ssl_ciphers</span>  HIGH:!aNULL:!MD5</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>  
  
    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>  
        <span class="token directive"><span class="token keyword">proxy_set_header</span>   X-Real-IP         <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>  
        <span class="token directive"><span class="token keyword">proxy_set_header</span>   Host              <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>  
        <span class="token directive"><span class="token keyword">proxy_set_header</span>   X-Forwarded-For   <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>  
        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>  
        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>  
        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新挂载重启</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker run --name Nginx -p 443:443 -p 80:80 -v /home/nginx/logs:/var/log/nginx -v/home/nginx/html:/usr/share/nginx/html
-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -d --restart=always nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>进入nginx容器</p></li><li><p>在外部编写好<code>default.conf</code>后copy到容器内，包括生成的<code>pem</code>文件</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker cp default.conf Nginx:/etc/nginx/conf.d/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重启</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker restart Nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重新访问，已经是https了</p></li></ul><h1 id="ps更新" tabindex="-1"><a class="header-anchor" href="#ps更新" aria-hidden="true">#</a> PS<code>更新</code></h1><p>用这种方式生成的短期证书有效期是 90 天，在过期之后我们还需要对其进行更新（renew）操作，只需要将上面的命令 <code>certonly</code> 改为 <code>renew</code> 即可，该命令会自动更新 <code>/etc/letsencrypt/live/</code> 目录下有效期少于 30 天的证书.然后使用<code>docker cp</code>命令拷贝到Nginx容器中，最后重启</p>`,12);function h(b,g){const s=t("ExternalLinkIcon");return c(),r("div",null,[o,p,e("p",null,[n("Github 地址："),e("a",u,[n("https://github.com/certbot/certbot"),a(s)]),n(" 本质上来说，certbot 就是一个 ACME client，这也是 "),e("a",v,[n("Let’s Encrypt"),a(s)]),n(" 官网推荐的签发证书的方式，适用于对自己的 domain 具有 shell 访问能力的情况，使用所谓的 "),e("a",k,[n("ACME"),a(s)]),n(" 协议来自动化的签发证书，很大程度上简化了证书签发的步骤")]),m])}const f=i(l,[["render",h],["__file","免费申请SSL证书.html.vue"]]);export{f as default};
